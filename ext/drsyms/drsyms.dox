/* **********************************************************
 * Copyright (c) 2011 Google, Inc.  All rights reserved.
 * Copyright (c) 2010 VMware, Inc.  All rights reserved.
 * **********************************************************/

/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * 
 * * Neither the name of VMware, Inc. nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

/**
***************************************************************************
***************************************************************************
\page page_drsyms Symbol Access Library

The \p drsyms DynamoRIO Extension provides symbol information.  Currently drsyms
supports reading symbol information from Windows PDB files and Linux ELF files
with DWARF2 line information.  Eventually we intend to add support for Cygwin,
but it is not tested currently.

 - \ref sec_drsyms_setup
 - \ref sec_drsyms_api
 - \ref sec_drsyms_write

\section sec_drsyms_setup Setup

To use \p drsyms with your client simply include this line in your client's
\p CMakeLists.txt file:

\code use_DynamoRIO_extension(clientname drsyms) \endcode

That will automatically set up the include path and library dependence.

The \p drsyms library on Windows relies on the \p dbghelp.dll library from
Microsoft.  You will need to download the Debugging Tools for Windows
package from http://www.microsoft.com/whdc/devtools/debugging/default.mspx
and place the \p dbghelp.dll in the same directory as either \p drsyms.dll
or as your client library.

More recent versions of \p dbghelp.dll on Windows can use significant
amounts of stack space.  We recommend raising the stack size when using \p
drsyms on Windows from the default 20KB to 36KB via the DynamoRIO runtime
option <tt>-stack_size 36K</tt>.

The \p drsyms library on Linux uses bundled copies of \p libelf, \p libdwarf,
and \p libelftc built from the
<a href="http://elftoolchain.sourceforge.net">elftoolchain</a> project and
requires no setup.

\section sec_drsyms_api API

All functions return a success code of type #drsym_error_t.

Prior to use, \p drsyms must be initialized by a call to drsym_init().  
The \p drsyms API will eventually support both sideline and online use, and
the parameter to drsym_init() will specify the symbol server to use for
sideline use.  Today only online use is supported and \p NULL should be
passed.

Symbol lookup is supported in both directions: from an address to a symbol
via drsym_lookup_address(), and from a symbol to an address via
drsym_lookup_symbol().  All symbols in a given module can be enumerated via
drsym_enumerate_symbols(), though on Windows using drsym_search_symbols()
for a particular match where a non-full search is not required (i.e., the
search is only targeting function symbols) is significantly faster and uses
less memory than a full enumeration.  In fact, drsym_search_symbols() is
usually faster than drsym_lookup_symbol().

For C++ applications, each routine that handles symbols accepts a \p flags
argument that controls how or whether C++ symbols are demangled or undecorated.
Currently there are three modes:

- \p DRSYM_LEAVE_MANGLED: Matches against or returns the mangled C++ symbol.
- \p DRSYM_DEMANGLE: Matches against or returns the demangled C++ symbol without
  template arguments or parameter types, such as \p __gnu_cxx::hashmap<>::find().
- \p DRSYM_DEMANGLE_FULL: Matches against or returns the fully demangled C++
  symbol with template arguments and parameter types.

\p DRSYM_DEFAULT_FLAGS enables demangling by default.

On Windows, however, this functionality is reduced due to the limitations of
\p dbghelp.dll.  The Visual C++ compiler only stores a partially qualified
demangled name in the PDB file for "private" names, which include symbols for
static functions.  Currently, each routine handles this problem differently.
drsym_enumerate_symbols() enumerates both public and private symbols, but cannot
provide either the mangled name or the fully demangled name for private symbols.
drsym_lookup_symbol() and drsym_lookup_address() do not support \p
DRSYM_DEMANGLE_FULL.

Furthermore, \p dbghelp.dll does not have any arguments to its demangler to
suppress template argument expansion.  Therefore the names we produce with
\p DRSYM_DEMANGLE include template arguments, but do not include function
parameters.

For an example of usage see the \p instrcalls sample client distributed
with DynamoRIO.

When finished with the library, call drsym_exit().

\section sec_drsyms_write Console Writing

The \p drsyms Extension also provides convenience routines for printing to
the \p cmd window, which DR's dr_printf() and dr_fprintf() are unable to do
(Issue 261).  Use drsym_write_to_console() to write to any kind of window,
and drsym_using_console() to determine whether inside a "console" or \p cmd
window.

Unfortunately there are significant limitations to this console
printing support:

 - It does not work from the exit event.  Once the application terminates
   its state with csrss (toward the very end of ExitProcess), no output
   will show up on the console.  We have no good solution here yet as exiting
   early is not ideal.
 - It does not work at all from graphical applications, even when they are
   launched from a console.
 - In the future, with earliest injection (Issue 234), writing to the
   console may not work from the client init event.

*/
