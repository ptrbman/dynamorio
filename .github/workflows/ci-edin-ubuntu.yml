name: Build CI

on:
  # Manual trigger using the Actions page. May remove when integration complete.
  # Run on pushes to master and on pull request changes, including from a
  # forked repo with no "push" trigger, while avoiding duplicate triggers.
  push:
    branches:
      - edin-updating-database-approach
  pull_request:
    branches:
      - edin-updating-database-approach

defaults:
  run:
    shell: bash
  # We'd like to add common initial steps for all jobs, but that's not supported.
  # Composite Run Steps can help, but we don't have that many common steps -- just
  # checkout and fetch for now.
  # https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/about-actions#composite-run-steps-actions
  # https://github.community/t/reusing-sharing-inheriting-steps-between-jobs-declarations

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true

    # Install multilib for non-cross-compiling Linux build.
    # GA CI uses packages.microsoft.com which is missing i386 packages, and
    # attempts at using apt with us.archive-ubuntu.com hit dep issues:
    # so we manually install the i386 packages we need.
    - name: Create Build Environment
      run: |
        sudo apt update
        sudo apt-get -y install doxygen vera++ zlib1g-dev libsnappy-dev \
          liblz4-dev libmysqlcppconn g++-multilib libunwind-dev
        sudo add-apt-repository 'deb [arch=i386] http://us.archive.ubuntu.com/ubuntu focal main'
        apt download libunwind8:i386 libunwind-dev:i386 liblzma5:i386 \
          zlib1g:i386 zlib1g-dev:i386
        mkdir ../extract
        for i in *.deb; do dpkg-deb -x $i ../extract; done
        sudo rsync -av ../extract/usr/lib/i386-linux-gnu/ /usr/lib/i386-linux-gnu/
        sudo rsync -av ../extract/lib/i386-linux-gnu/ /usr/lib/i386-linux-gnu/
        sudo rsync -av ../extract/usr/include/i386-linux-gnu/ /usr/include/
        echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

    - name: Initialize submodules
      run: git submodule update --init --recursive

    - name: Create build directory
      run: mkdir build

    - name: Generate makefiles with CMake
      run: |
        cd build
        cmake ..

    - name: Build the project
      run: |
        cd build
        make -j4

    - name: Test run
      run: |
        ./build/bin64/drrun echo hello world

    - name: Archive build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dynamorio-build
        path: /build

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        MY_PAT: ${{ secrets.MY_PAT }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build
        asset_name: build.zip
        asset_content_type: application/zip
